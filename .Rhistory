# VarCorr(model1.1)
model1.2 = lme(fixed = NormFeces ~ TIME + Treatment, random = ~TIME|Toilet, data = phase1, method = "REML")
summary(model1.2)
VarCorr(model1.2)
intervals(model1.2)
model1.3 = lme(fixed = NormFeces ~ TIME*Treatment + Usage, random = ~TIME|Toilet, data = phase1, method = "REML")
summary(model1.3)
VarCorr(model1.3)
intervals(model1.3)
phase2 = data[Phase=="2"]
ggplot(phase2,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=as.factor(Usage),fill=Sensor),method="lm") +
ggtitle("phase2")
# model2.1 = lmer(NormFeces ~ TIME + Treatment + Usage + (TIME|Toilet), data = phase2)
# summary(model2.1)
# VarCorr(model2.1)
model2.2 = lme(fixed = NormFeces ~ TIME + Treatment, random = ~TIME|Toilet, data = phase2, method = "REML")
summary(model2.2)
VarCorr(model2.2)
# intervals(model2.2)
model2.3 = lme(fixed = NormFeces ~ TIME*Treatment + Usage, random = ~TIME|Toilet, data = phase2, method = "REML")
summary(model2.3)
VarCorr(model2.3)
intervals(model2.3)
phase3 = data[Phase=="3"]
ggplot(phase3,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=as.factor(Usage),fill=Sensor),method="lm") +
ggtitle("phase3")
# model3.1 = lmer(NormFeces ~ TIME + Treatment + Usage + (TIME|Toilet), data = phase3)
# summary(model3.1)
# VarCorr(model3.1)
model3.2 = lme(fixed = NormFeces ~ TIME + Treatment, random = ~TIME|Toilet, data = phase3, method = "REML")
summary(model3.2)
VarCorr(model3.2)
# intervals(model3.2)
model3.3 = lme(fixed = NormFeces ~ TIME + Treatment + Usage, random = ~TIME|Toilet, data = phase3, method = "REML")
summary(model3.3)
VarCorr(model3.3)
intervals(model3.3)
model3.4 = lme(fixed = NormFeces ~ TIME*Treatment + Usage, random = ~TIME|Toilet, data = phase3, method = "REML")
summary(model3.4)
VarCorr(model3.4)
# intervals(model3.4)
# # original time coding from a different script
# CollectionDates[,TIME:=seq(1,length(unique(CollectionDates$Date))),by=Toilet]
# CollectionDates[,TRANS:=ifelse(TIME<95,0,1),by=Toilet]
# CollectionDates[,RECOV:=ifelse(TIME>125,TIME - 126,0),by=Toilet]
# CollectionDates[,TIME.A:=ifelse(TIME<95,TIME,95),by=Toilet]
# data[Date<=as.Date("2016-12-19"),Phase:=0] # monday
# data[Date>=as.Date("2017-01-08") & Date<=as.Date("2017-02-08"),Phase:=1]
# data[Date>as.Date("2017-02-08") & Date<=as.Date("2017-02-24"),Phase:=2]
# data[Date>as.Date("2017-02-24") & Date<=as.Date("2017-03-27"),Phase:=3]
# pulling out the times based on dates
setkey(data,Toilet,Date)
data[,.(DateFirst=first(Date,1),
TimeFirst=first(TIME,1)),
# DateLast=last(Date,1),
# TimeLast=last(TIME,1)),
by=Phase]
# data[,time94:=TIME - 94]
# data[,time126:=TIME - 126]
# data[,time143:=TIME - 143]
# data[,slope0:=ifelse(TIME<74,TIME,74)] # count for baseline, 74 for P1-P3
# data[,slopepost:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for P1
# data[,slope1:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for P1
# data[TIME>=126,slope1:=33] # 33 for P2 & P3
# data[,slope2:=ifelse(TIME<126,0,TIME-125)] # 0 for baseline & P1, count for P2
# data[TIME>=143,slope2:=16] # count (1-16) for P2
# data[,slope3:=ifelse(TIME<143,0,TIME-142)] # 0 for baseline, P1, P2, count for P3
data[,slopepost:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for post-period
data[,slope01:=ifelse(TIME<126,TIME,126)] # count for baseline and P1, constant for P2 & P3
data[,slope01m:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for P1
data[,slope01m:=ifelse(TIME<126,slope01m,33)] # constant for P2 & P3
data[,slope02:=ifelse(TIME<94,TIME,74)] # count for baseline, constant for P1
data[TIME>=126,slope02:=ifelse(TIME<142,TIME-51,90)] # count for P2, constant for P3
data[,slope02m:=ifelse(TIME<126,0,TIME-125)] # 0 for baseline & P1, count for P2
data[,slope02m:=ifelse(TIME<142,slope02m,16)] # constant for P3
data[,slope03:=ifelse(TIME<94,TIME,74)] # count for baseline, constant for P1 & P2
data[,slope03:=ifelse(TIME<142,slope03,TIME-68)] # count for P3
data[,slope03m:=ifelse(TIME<142,0,TIME-141)] # 0 for baseline & P1, count for P2
data[,slope12:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for P1 & P2
data[,slope12:=ifelse(TIME<142,slope12,49)] # constant for P3
data[,slope12m:=ifelse(TIME<125,0,TIME-125)] # 0 for baseline and P1, count for P2
data[,slope12m:=ifelse(TIME<142,slope12m,16)] # constant for P3
data[,slope23:=ifelse(TIME<125,0,TIME-125)] # 0 for baseline and P1, count for P2 & P3
data[,slope23m:=ifelse(TIME<142,0,TIME-141)] # 0 for baseline, P1 & P2, count for P3
data[,int0:=ifelse(TIME<=74,1,0)]
data[,intpost:=ifelse(TIME<=74,0,1)]
data[,int1:=ifelse(TIME>=94 & TIME<126,1,0)]
data[,int2:=ifelse(TIME>=126 & TIME<143,1,0)]
data[,int3:=ifelse(TIME>=143,1,0)]
foo =data[Toilet=="KR-1.1",.(Date,Phase,TIME,slope23,slope23m,int0,int1,int2,int3)]
# modelc.1 = lmer(NormFeces ~ Treatment + Usage + (slope0|Toilet), data = data)
# summary(modelc.1)
# VarCorr(modelc.1)
# comparing baseline against the post-intervention period intercepts
model0.intpost = lme(fixed = NormFeces ~ Treatment*intpost + Usage + TIME + slopepost, random = ~ TIME + slopepost|Toilet, data = data, method = "REML")
summary(model0.intpost)
VarCorr(model0.intpost)
intervals(model0.intpost)
# comparing baseline against the post-intervention period intercepts
model0.intpost = lme(fixed = NormFeces ~ Treatment*intpost + Usage, random = ~ 1|Toilet, data = data, method = "REML")
summary(model0.intpost)
VarCorr(model0.intpost)
intervals(model0.intpost)
# comparing baseline against the post-intervention period slopes
model0.slopepost = lme(fixed = NormFeces ~ Treatment*slopepost + Usage + TIME + intpost, random = ~ TIME + slopepost|Toilet, data = data, method = "REML")
summary(model0.slopepost)
VarCorr(model0.slopepost)
intervals(model0.slopepost)
# comparing baseline against the post-intervention period mean efficiencies
model0.means = lme(fixed = NormFeces ~ Treatment + intpost, random = ~1|Toilet, data = data, method = "REML")
summary(model0.means)
VarCorr(model0.means)
intervals(model0.means)
# comparing baseline against phase 1 intercepts
model0.1int = lme(fixed = NormFeces ~ Treatment*int1 + Usage + slope01 + slope02m + slope03m + int2 + int3, random = ~ slope01 + slope01m|Toilet, data = data, method = "REML")
summary(model0.1int)
VarCorr(model0.1int)
intervals(model0.1int)
# comparing baseline against phase 1 intercepts
model0.1int = lme(fixed = NormFeces ~ Treatment*int1 + Usage + int2 + int3, random = ~ 1|Toilet, data = data, method = "REML")
summary(model0.1int)
VarCorr(model0.1int)
intervals(model0.1int)
# comparing baseline against phase 1 slopes
model0.1slope = lme(fixed = NormFeces ~ Treatment*slope01m + Usage + slope01 + slope02m + slope03m + int1 + int2 + int3, random = ~ slope01 + slope01m|Toilet, data = data, method = "REML")
summary(model0.1slope)
VarCorr(model0.1slope)
intervals(model0.1slope)
# comparing baseline against phase 2 intercepts
model0.2int = lme(fixed = NormFeces ~ Treatment*int2 + Usage + slope02 + slope01m + slope03m + int1 + int3, random = ~ slope02 + slope02m|Toilet, data = data, method = "REML")
summary(model0.2int)
VarCorr(model0.2int)
intervals(model0.2int)
# comparing baseline against phase 2 slopes
model0.2slope = lme(fixed = NormFeces ~ Treatment*slope02m + Usage + slope02 + slope01m + slope03m + int1 + int2 + int3, random = ~ slope02 + slope02m|Toilet, data = data, method = "REML")
summary(model0.2slope)
VarCorr(model0.2slope)
intervals(model0.2slope)
# comparing baseline against phase 3 intercepts
model0.3int = lme(fixed = NormFeces ~ Treatment*int3 + Usage + slope03 + slope01m + slope02m + slope03m + int1 + int2, random = ~ slope03 + slope03m|Toilet, data = data, method = "REML")
summary(model0.3int)
VarCorr(model0.3int)
intervals(model0.3int)
# comparing baseline against phase 3 slopes
model0.3slope = lme(fixed = NormFeces ~ Treatment*slope03m + Usage + slope03 + slope01m + slope02m + int1 + int2 + int3, random = ~ slope03 + slope03m|Toilet, data = data, method = "REML")
summary(model0.3slope)
VarCorr(model0.3slope)
intervals(model0.3slope)
# comparing phase 1 and phase 2
model1.2int = lme(fixed = NormFeces ~ Treatment*int2 + Usage + slope12 + slope12m + slope23m + int3, random = ~ slope12 + slope12m|Toilet, data = data, method = "REML")
summary(model1.2int)
VarCorr(model1.2int)
intervals(model1.2int)
# comparing baseline against phase 2
model1.2slope = lme(fixed = NormFeces ~ Treatment*slope12m + Usage + slope12 + slope12m + slope23m + int2 + int3, random = ~ slope12 + slope12m|Toilet, data = data, method = "REML")
summary(model1.2slope)
VarCorr(model1.2slope)
intervals(model1.2slope)
# comparing phase 2 to phase 3 intercepts
model2.3int = lme(fixed = NormFeces ~ Treatment*int3 + Usage + slope23 + slope23m, random = ~ slope23 + slope23m|Toilet, data = data, method = "REML")
model0.means = lme(fixed = NormFeces ~ Treatment, random = ~1|Toilet, data = baseline, method = "REML")
summary(model0.means)
data[,.(MeanEfficiency=mean(NormFeces)),by=.(Phase,Treatment)][order(Phase)]
model0.means = lme(fixed = NormFeces ~ 1, random = ~1|Treament, data = baseline, method = "REML")
baseline
model0.means = lme(fixed = NormFeces ~ 1, random = ~1|as.factor(Treament), data = baseline, method = "REML")
model0.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = baseline, method = "REML")
summary(model0.means)
data[,.(MeanEfficiency=mean(NormFeces)),by=.(Phase,Treatment)][order(Phase)]
summary(model0.means)
data[,.(MeanEfficiency=mean(NormFeces)),by=.(Phase,Treatment)][order(Phase)]
data[,.(MeanEfficiency=mean(NormFeces)),by=.(PrePost,Treatment)][order(PrePost)]
model0.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = baseline, method = "REML")
summary(model0.means)
data
model0.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==0], method = "REML")
summary(model0.means)
modelpost.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Treatment==1], method = "REML")
summary(modelpost.means)
data[,.(MeanEfficiency=mean(NormFeces)),by=.(PrePost,Treatment)][order(PrePost)]
modelpost.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[PrePost==1], method = "REML")
summary(modelpost.means)
data[,.(MeanEfficiency=mean(NormFeces)),by=.(PrePost,Treatment)][order(PrePost)]
summary(modelpost.means)
model0.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==0], method = "REML")
summary(model0.means)
data[,.(MeanEfficiency=mean(NormFeces)),by=.(Phase,Treatment)][order(Phase)]
data[,.(MeanEfficiency=mean(NormFeces)),by=.(Phase,Treatment)][order(Phase)]
data[,.(MeanEfficiency=mean(NormFeces)),by=.(PrePost,Treatment)][order(PrePost)]
model0.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==0], method = "REML")
summary(model0.means)
modelpost.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[PrePost==1], method = "REML")
summary(modelpost.means)
model1.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==1], method = "REML")
summary(model1.means)
model2.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==2], method = "REML")
summary(model2.means)
model3.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==3], method = "REML")
summary(model3.means)
model1.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==1], method = "REML")
summary(model1.means)
data[,.(MeanEfficiency=mean(NormFeces)),by=.(Phase,Treatment)][order(Phase)]
data[,.(MeanEfficiency=mean(NormFeces)),by=.(PrePost,Treatment)][order(PrePost)]
# setup
require(DBI)
require(RMySQL)
require(data.table)
require(lubridate)
require(missForest)
require(zoo)
require(RForcecom)
require(d3heatmap)
require(leaflet)
require(koboloadeR)
require(multilevel)
require(nlme)
require(lme4)
require(DiagrammeR)
require(lattice)
require(ggplot2)
require(MCMCglmm)
require(purrr)
library(dtplyr)
library(data.table)
library(xtable)
library(d3heatmap)
library(ggplot2)
library(knitr)
# setup
require(DBI)
require(RMySQL)
require(data.table)
require(lubridate)
require(missForest)
require(zoo)
require(RForcecom)
require(d3heatmap)
require(leaflet)
require(koboloadeR)
require(multilevel)
require(nlme)
require(lme4)
require(DiagrammeR)
require(lattice)
require(ggplot2)
require(MCMCglmm)
require(purrr)
library(dtplyr)
library(data.table)
library(xtable)
library(d3heatmap)
library(ggplot2)
library(knitr)
data = setDT(read.csv("D:/Google Drive/School/PDX/SWEET Lab/Sanergy/Data/TotalCollectionsClean-2017-05-01.csv"))
# data = setDT(read.csv("C:/Users/bryan/Google Drive/School/PDX/SWEET Lab/Sanergy/Data/TotalCollectionsClean-2017-05-01.csv"))
data[,Date:=as.Date(Date)]
data = data[Date <= as.Date("2017-03-27")]
data[,NormFeces:= (Feces/0.721) / SolidSize ] # using a density of 0.721 based on waste collector feedback (full at 27kg)
data[,NormUrine:= Urine / 22] # reducing to 22L based on Taylor's lab measurements
# excluding supurious data
data = data[Feces <= 35]
# excluding non-instrumented latrines with limited data
excluded_toilets = c("KR-180.1","KR-176.1","KR-177.1","KR-163.2","KR-163.1","KR-168.1","KR-110.1","KR-167.1","KR-171.1","KR-151.2","KR-151.1","KR-142.1","KR-107.1","KR-107.2","KR-107.3","KR118.1","KR-118.2","KR-50.1","KR-50.2","50.3")
# Setting the time and treatment dummy variables
data[,PrePost:=ifelse(Date<as.Date("2017-01-09"),0,1)]
data[,Treatment:=ifelse(Sensor==FALSE,0,1)]
# assining phases
data[Date<=as.Date("2016-12-19"),Phase:=0] # monday
data[Date>=as.Date("2017-01-08") & Date<=as.Date("2017-02-08"),Phase:=1]
data[Date>as.Date("2017-02-08") & Date<=as.Date("2017-02-24"),Phase:=2]
data[Date>as.Date("2017-02-24") & Date<=as.Date("2017-03-27"),Phase:=3]
data$Phase = as.factor(data$Phase)
# Creating the response variable
data[,NormFeces:= (Feces/0.721) / SolidSize ] # using a density of 0.721 based on waste collector feedback (full at 27kg)
data[,NormUrine:= Urine / 22] # reducing to 22L based on Taylor's lab measurements
# excluding supurious data
data = data[Feces <= 35]
# ploting the phases as a piecewise regression
ggplot(data,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=Phase,fill=Sensor)) +
ggtitle("GAM")
ggplot(data,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=Phase,fill=Sensor),method="loess") +
ggtitle("Loess")
ggplot(data,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=Phase,fill=Sensor),method="lm") +
ggtitle("Linear Model")
data[,.(MeanEfficiency=mean(NormFeces)),by=.(Phase,Treatment)][order(Phase)]
data[,.(MeanEfficiency=mean(NormFeces)),by=.(PrePost,Treatment)][order(PrePost)]
model0.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==0], method = "REML")
summary(model0.means)
modelpost.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[PrePost==1], method = "REML")
summary(modelpost.means)
model1.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==1], method = "REML")
summary(model1.means)
model2.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==2], method = "REML")
summary(model2.means)
model3.means = lme(fixed = NormFeces ~ 1, random = ~1|Treatment, data = data[Phase==3], method = "REML")
summary(model3.means)
data[FinalUsage=="Low",Usage:=0]
data[FinalUsage=="Medium",Usage:=1]
data[FinalUsage=="High",Usage:=2]
baseline = data[Phase=="0"]
ggplot(baseline,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=as.factor(Usage),fill=Sensor),method="lm") +
ggtitle("Baseline")
# model0.1 = lmer(NormFeces ~ TIME + Treatment + Usage + (TIME|Toilet), data = baseline)
# summary(model0.1)
# VarCorr(model0.1)
model0.2 = lme(fixed = NormFeces ~ TIME + Treatment, random = ~TIME|Toilet, data = baseline, method = "REML")
summary(model0.2)
VarCorr(model0.2)
intervals(model0.2)
model0.3 = lme(fixed = NormFeces ~ TIME + Treatment + Usage, random = ~TIME|Toilet, data = baseline, method = "REML")
summary(model0.3)
VarCorr(model0.3)
intervals(model0.3)
model0.4 = lme(fixed = NormFeces ~ TIME + Treatment*Usage, random = ~TIME|Toilet, data = baseline, method = "REML")
summary(model0.4)
VarCorr(model0.4)
intervals(model0.4)
model0.5 = lme(fixed = NormFeces ~ TIME*Usage + Treatment, random = ~TIME|Toilet, data = baseline, method = "REML")
summary(model0.5)
VarCorr(model0.5)
intervals(model0.5)
model0.5 = lme(fixed = NormFeces ~ TIME*Treatment + Usage, random = ~TIME|Toilet, data = baseline, method = "REML")
summary(model0.5)
VarCorr(model0.5)
intervals(model0.5)
phase1 = data[Phase=="1"]
ggplot(phase1,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=as.factor(Usage),fill=Sensor),method="lm") +
ggtitle("phase1")
# model1.1 = lmer(NormFeces ~ TIME + Treatment + Usage + (TIME|Toilet), data = phase1)
# summary(model1.1)
# VarCorr(model1.1)
model1.2 = lme(fixed = NormFeces ~ TIME + Treatment, random = ~TIME|Toilet, data = phase1, method = "REML")
summary(model1.2)
VarCorr(model1.2)
intervals(model1.2)
model1.3 = lme(fixed = NormFeces ~ TIME*Treatment + Usage, random = ~TIME|Toilet, data = phase1, method = "REML")
summary(model1.3)
VarCorr(model1.3)
intervals(model1.3)
phase2 = data[Phase=="2"]
ggplot(phase2,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=as.factor(Usage),fill=Sensor),method="lm") +
ggtitle("phase2")
# model2.1 = lmer(NormFeces ~ TIME + Treatment + Usage + (TIME|Toilet), data = phase2)
# summary(model2.1)
# VarCorr(model2.1)
model2.2 = lme(fixed = NormFeces ~ TIME + Treatment, random = ~TIME|Toilet, data = phase2, method = "REML")
summary(model2.2)
VarCorr(model2.2)
# intervals(model2.2)
model2.3 = lme(fixed = NormFeces ~ TIME*Treatment + Usage, random = ~TIME|Toilet, data = phase2, method = "REML")
summary(model2.3)
VarCorr(model2.3)
intervals(model2.3)
phase3 = data[Phase=="3"]
ggplot(phase3,aes(x=Date)) +
#geom_jitter((aes(y=NormFeces,color=Sensor,alpha = 0.5))) +
stat_smooth(aes(y=NormFeces,color=as.factor(Usage),fill=Sensor),method="lm") +
ggtitle("phase3")
# model3.1 = lmer(NormFeces ~ TIME + Treatment + Usage + (TIME|Toilet), data = phase3)
# summary(model3.1)
# VarCorr(model3.1)
model3.2 = lme(fixed = NormFeces ~ TIME + Treatment, random = ~TIME|Toilet, data = phase3, method = "REML")
summary(model3.2)
VarCorr(model3.2)
# intervals(model3.2)
model3.3 = lme(fixed = NormFeces ~ TIME + Treatment + Usage, random = ~TIME|Toilet, data = phase3, method = "REML")
summary(model3.3)
VarCorr(model3.3)
intervals(model3.3)
model3.4 = lme(fixed = NormFeces ~ TIME*Treatment + Usage, random = ~TIME|Toilet, data = phase3, method = "REML")
summary(model3.4)
VarCorr(model3.4)
# intervals(model3.4)
# # original time coding from a different script
# CollectionDates[,TIME:=seq(1,length(unique(CollectionDates$Date))),by=Toilet]
# CollectionDates[,TRANS:=ifelse(TIME<95,0,1),by=Toilet]
# CollectionDates[,RECOV:=ifelse(TIME>125,TIME - 126,0),by=Toilet]
# CollectionDates[,TIME.A:=ifelse(TIME<95,TIME,95),by=Toilet]
# data[Date<=as.Date("2016-12-19"),Phase:=0] # monday
# data[Date>=as.Date("2017-01-08") & Date<=as.Date("2017-02-08"),Phase:=1]
# data[Date>as.Date("2017-02-08") & Date<=as.Date("2017-02-24"),Phase:=2]
# data[Date>as.Date("2017-02-24") & Date<=as.Date("2017-03-27"),Phase:=3]
# pulling out the times based on dates
setkey(data,Toilet,Date)
data[,.(DateFirst=first(Date,1),
TimeFirst=first(TIME,1)),
# DateLast=last(Date,1),
# TimeLast=last(TIME,1)),
by=Phase]
# data[,time94:=TIME - 94]
# data[,time126:=TIME - 126]
# data[,time143:=TIME - 143]
# data[,slope0:=ifelse(TIME<74,TIME,74)] # count for baseline, 74 for P1-P3
# data[,slopepost:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for P1
# data[,slope1:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for P1
# data[TIME>=126,slope1:=33] # 33 for P2 & P3
# data[,slope2:=ifelse(TIME<126,0,TIME-125)] # 0 for baseline & P1, count for P2
# data[TIME>=143,slope2:=16] # count (1-16) for P2
# data[,slope3:=ifelse(TIME<143,0,TIME-142)] # 0 for baseline, P1, P2, count for P3
data[,slopepost:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for post-period
data[,slope01:=ifelse(TIME<126,TIME,126)] # count for baseline and P1, constant for P2 & P3
data[,slope01m:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for P1
data[,slope01m:=ifelse(TIME<126,slope01m,33)] # constant for P2 & P3
data[,slope02:=ifelse(TIME<94,TIME,74)] # count for baseline, constant for P1
data[TIME>=126,slope02:=ifelse(TIME<142,TIME-51,90)] # count for P2, constant for P3
data[,slope02m:=ifelse(TIME<126,0,TIME-125)] # 0 for baseline & P1, count for P2
data[,slope02m:=ifelse(TIME<142,slope02m,16)] # constant for P3
data[,slope03:=ifelse(TIME<94,TIME,74)] # count for baseline, constant for P1 & P2
data[,slope03:=ifelse(TIME<142,slope03,TIME-68)] # count for P3
data[,slope03m:=ifelse(TIME<142,0,TIME-141)] # 0 for baseline & P1, count for P2
data[,slope12:=ifelse(TIME<94,0,TIME-93)] # 0 for baseline, count for P1 & P2
data[,slope12:=ifelse(TIME<142,slope12,49)] # constant for P3
data[,slope12m:=ifelse(TIME<125,0,TIME-125)] # 0 for baseline and P1, count for P2
data[,slope12m:=ifelse(TIME<142,slope12m,16)] # constant for P3
data[,slope23:=ifelse(TIME<125,0,TIME-125)] # 0 for baseline and P1, count for P2 & P3
data[,slope23m:=ifelse(TIME<142,0,TIME-141)] # 0 for baseline, P1 & P2, count for P3
data[,int0:=ifelse(TIME<=74,1,0)]
data[,intpost:=ifelse(TIME<=74,0,1)]
data[,int1:=ifelse(TIME>=94 & TIME<126,1,0)]
data[,int2:=ifelse(TIME>=126 & TIME<143,1,0)]
data[,int3:=ifelse(TIME>=143,1,0)]
foo =data[Toilet=="KR-1.1",.(Date,Phase,TIME,slope23,slope23m,int0,int1,int2,int3)]
# modelc.1 = lmer(NormFeces ~ Treatment + Usage + (slope0|Toilet), data = data)
# summary(modelc.1)
# VarCorr(modelc.1)
# comparing baseline against the post-intervention period intercepts
model0.intpost = lme(fixed = NormFeces ~ Treatment*intpost + Usage + TIME + slopepost, random = ~ TIME + slopepost|Toilet, data = data, method = "REML")
summary(model0.intpost)
VarCorr(model0.intpost)
intervals(model0.intpost)
# comparing baseline against the post-intervention period intercepts
model0.intpost = lme(fixed = NormFeces ~ Treatment*intpost + Usage, random = ~ 1|Toilet, data = data, method = "REML")
summary(model0.intpost)
VarCorr(model0.intpost)
intervals(model0.intpost)
# comparing baseline against the post-intervention period slopes
model0.slopepost = lme(fixed = NormFeces ~ Treatment*slopepost + Usage + TIME + intpost, random = ~ TIME + slopepost|Toilet, data = data, method = "REML")
summary(model0.slopepost)
VarCorr(model0.slopepost)
intervals(model0.slopepost)
# comparing baseline against the post-intervention period mean efficiencies
model0.means = lme(fixed = NormFeces ~ Treatment + intpost, random = ~1|Toilet, data = data, method = "REML")
summary(model0.means)
VarCorr(model0.means)
intervals(model0.means)
# comparing baseline against phase 1 intercepts
model0.1int = lme(fixed = NormFeces ~ Treatment*int1 + Usage + slope01 + slope02m + slope03m + int2 + int3, random = ~ slope01 + slope01m|Toilet, data = data, method = "REML")
summary(model0.1int)
VarCorr(model0.1int)
intervals(model0.1int)
# comparing baseline against phase 1 intercepts
model0.1int = lme(fixed = NormFeces ~ Treatment*int1 + Usage + int2 + int3, random = ~ 1|Toilet, data = data, method = "REML")
summary(model0.1int)
VarCorr(model0.1int)
intervals(model0.1int)
# comparing baseline against phase 1 slopes
model0.1slope = lme(fixed = NormFeces ~ Treatment*slope01m + Usage + slope01 + slope02m + slope03m + int1 + int2 + int3, random = ~ slope01 + slope01m|Toilet, data = data, method = "REML")
summary(model0.1slope)
VarCorr(model0.1slope)
intervals(model0.1slope)
# comparing baseline against phase 2 intercepts
model0.2int = lme(fixed = NormFeces ~ Treatment*int2 + Usage + slope02 + slope01m + slope03m + int1 + int3, random = ~ slope02 + slope02m|Toilet, data = data, method = "REML")
summary(model0.2int)
VarCorr(model0.2int)
intervals(model0.2int)
# comparing baseline against phase 2 slopes
model0.2slope = lme(fixed = NormFeces ~ Treatment*slope02m + Usage + slope02 + slope01m + slope03m + int1 + int2 + int3, random = ~ slope02 + slope02m|Toilet, data = data, method = "REML")
summary(model0.2slope)
VarCorr(model0.2slope)
intervals(model0.2slope)
# comparing baseline against phase 3 intercepts
model0.3int = lme(fixed = NormFeces ~ Treatment*int3 + Usage + slope03 + slope01m + slope02m + slope03m + int1 + int2, random = ~ slope03 + slope03m|Toilet, data = data, method = "REML")
summary(model0.3int)
VarCorr(model0.3int)
intervals(model0.3int)
# comparing baseline against phase 3 slopes
model0.3slope = lme(fixed = NormFeces ~ Treatment*slope03m + Usage + slope03 + slope01m + slope02m + int1 + int2 + int3, random = ~ slope03 + slope03m|Toilet, data = data, method = "REML")
summary(model0.3slope)
VarCorr(model0.3slope)
intervals(model0.3slope)
# comparing phase 1 and phase 2
model1.2int = lme(fixed = NormFeces ~ Treatment*int2 + Usage + slope12 + slope12m + slope23m + int3, random = ~ slope12 + slope12m|Toilet, data = data, method = "REML")
summary(model1.2int)
VarCorr(model1.2int)
intervals(model1.2int)
# comparing baseline against phase 2
model1.2slope = lme(fixed = NormFeces ~ Treatment*slope12m + Usage + slope12 + slope12m + slope23m + int2 + int3, random = ~ slope12 + slope12m|Toilet, data = data, method = "REML")
summary(model1.2slope)
VarCorr(model1.2slope)
intervals(model1.2slope)
# comparing phase 2 to phase 3 intercepts
model2.3int = lme(fixed = NormFeces ~ Treatment*int3 + Usage + slope23 + slope23m, random = ~ slope23 + slope23m|Toilet, data = data, method = "REML")
library(blogdown)
setwd("D:/Google Drive/GitHub/blog")
serve_site()
build_site()
